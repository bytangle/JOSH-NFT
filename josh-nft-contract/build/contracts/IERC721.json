{
  "contractName": "IERC721",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Details can be found here: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md Note: the ERC-165 identifier for this interface is 0x80ac58cd.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"this emits when the approved address for an NFT changes or reaffirmed\",\"params\":{\"_approved\":\"the new owner's address\",\"_owner\":\"address of the owner of the NFT\",\"_tokenId\":\"the ID of the NFT\"}},\"ApprovalForAll(address,address,bool)\":{\"details\":\"emits when an operator is enabled or disabled for an owner\",\"params\":{\"_approved\":\"boolean showing approval or disapproval\",\"_operator\":\"address of to be set as operator\",\"_owner\":\"address of the owner of the NFT\"}},\"Transfer(address,address,uint256)\":{\"details\":\"This emits when the ownership of the NFT changes Note: it should also emit on NFT creation and destruction\",\"params\":{\"_from\":\"address of the initial owner\",\"_to\":\"address of the entity to receive the ownership\",\"_tokenId\":\"unique ID of the NFT\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"zero address is invalid\",\"params\":{\"_approved\":\"the new approved address for the NFT controller\",\"_tokenId\":\"NFT to approve\"}},\"balanceOf(address)\":{\"details\":\"cannot count NFTs assigned to the zero address. Note function should possibly throw or revert for an attempt to count NFTs assigned to zero address\",\"params\":{\"_owner\":\"the address of the NFTs owner\"},\"returns\":{\"_0\":\"The total NFT owned by `_owner`\"}},\"getApproved(uint256)\":{\"details\":\"throws if _tokenId isn't a valid NFT\",\"params\":{\"_tokenId\":\"the NFT to find the approved address for\"},\"returns\":{\"_0\":\"approved address\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"the address that acts on behalf of the `_owner`\",\"_owner\":\"the address that owns the NFT\"},\"returns\":{\"_0\":\"returns `true` if `_operator` is an approved operator for `_owner`, else otherwise\"}},\"ownerOf(uint256)\":{\"details\":\"NFTs assigned to zero address are considered invalid\",\"params\":{\"_tokenId\":\"uint256 id of the NFT\"},\"returns\":{\"_0\":\"address of the owner of NFT with `_tokenId` token ID\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"This work identically to the function declared above except that it lacks data argument\",\"params\":{\"_from\":\"address of the NFT owner\",\"_to\":\"new owner of NFT\",\"_tokenId\":\"NFT to transfer\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"throws unless the current owner `_to` is msg.sender,  an authorized operator or an approved address for the NFT Note: check the EIP-721 documentation for more details [url provided above]\",\"params\":{\"_data\":\"additional data if necessary with no specific format\",\"_from\":\"the current owner of the NFT\",\"_to\":\"the new owner\",\"_tokenId\":\"NFT to transfer\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"emits the ApprovalForAll event. The contract must allow multiple operators per owner\",\"params\":{\"_approved\":\"true if operator is approved, false to revoke approval\",\"_operator\":\"address to add to set of authorized operators\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function uses less than 30,000 gas.\",\"params\":{\"_interfaceID\":\"Interface identifier as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `_interfaceID` and `_interfaceID` is not 0xffffffff, `false` otherwise\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"throws unless _from is msg.sender, an authorized operator or an approved addressed for the NFT\",\"params\":{\"_from\":\"address of current owner of the NFT\",\"_to\":\"address of the new owner of the NFT\",\"_tokenId\":\"NFT to be transfered\"}}},\"title\":\"ERC721 Non-Fungible token standard Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"change or reaffirm the approved address for an NFT\"},\"balanceOf(address)\":{\"notice\":\"counts the owner's NFTs\"},\"getApproved(uint256)\":{\"notice\":\"get approved address for a single NFT\"},\"isApprovedForAll(address,address)\":{\"notice\":\"check if an address is an authorized operator for another address\"},\"ownerOf(uint256)\":{\"notice\":\"get the owner of the NFT with token ID `_tokenId`\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer NFT ownership between addresses\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfers the ownership of an NFT from one address to the other\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"enable or disable approval for a third-party `_operator` to manage `msg.sender`'s assets\"},\"supportsInterface(bytes4)\":{\"notice\":\"queries if a contract supports an interface\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfers NFT ownership Note: The caller is responsible to check if `_to` is capable of receiving NFTs otherwise, they may be lost\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/IERC165.sol\":{\"keccak256\":\"0x43741d829c2e42a674e010542cdecaf2007b521d684ae0918d5e52753c259bc9\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://f4565f2e0af34e3c2cc0fa2097a47937cb7fff563c8c352e14d84177a5514424\",\"dweb:/ipfs/QmZnW78GyEaVeGdnFSGkhWSqvp7hU4TYu6FGuT9h6D1hdU\"]},\"project:/contracts/IERC721.sol\":{\"keccak256\":\"0x9ef5d3f991d68de970811336fff3c9f9264e9aeec9704bfa1d8f9bb437a0ed09\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://718855e2138ea6c0c8b79f7bed0a1206fc7fc5943c8317bfe2ada5833fe86a44\",\"dweb:/ipfs/QmbWRgyqT6WtQDfQRjg5V9jj59AeZa7hRJ7Hoj4RNaenEp\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @title ERC721 Non-Fungible token standard Interface\n * @dev Details can be found here: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n * Note: the ERC-165 identifier for this interface is 0x80ac58cd.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev This emits when the ownership of the NFT changes\n     * Note: it should also emit on NFT creation and destruction\n     * @param _from address of the initial owner\n     * @param _to address of the entity to receive the ownership\n     * @param _tokenId unique ID of the NFT\n     */\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /**\n     * @dev this emits when the approved address for an NFT changes or reaffirmed\n     * @param _owner address of the owner of the NFT\n     * @param _approved the new owner's address\n     * @param _tokenId the ID of the NFT\n     */\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /**\n     * @dev emits when an operator is enabled or disabled for an owner\n     * @param _owner address of the owner of the NFT\n     * @param _operator address of to be set as operator\n     * @param _approved boolean showing approval or disapproval\n     */\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /**\n     * @notice counts the owner's NFTs\n     * @dev cannot count NFTs assigned to the zero address.\n     * Note function should possibly throw or revert for an attempt to count NFTs assigned to zero address\n     * @param _owner the address of the NFTs owner\n     * @return The total NFT owned by `_owner`\n     */\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice get the owner of the NFT with token ID `_tokenId`\n     * @dev NFTs assigned to zero address are considered invalid\n     * @param _tokenId uint256 id of the NFT\n     * @return address of the owner of NFT with `_tokenId` token ID\n     */\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /**\n     * @notice transfers the ownership of an NFT from one address to the other\n     * @dev throws unless the current owner `_to` is msg.sender, \n            an authorized operator or an approved address for the NFT\n     * Note: check the EIP-721 documentation for more details [url provided above]\n     * @param _from the current owner of the NFT\n     * @param _to the new owner\n     * @param _tokenId NFT to transfer\n     * @param _data additional data if necessary with no specific format\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) external payable;\n\n    /**\n     * @notice transfer NFT ownership between addresses\n     * @dev This work identically to the function declared above except that it lacks data argument\n     * @param _from address of the NFT owner\n     * @param _to new owner of NFT\n     * @param _tokenId NFT to transfer\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /**\n     * @notice transfers NFT ownership\n     * Note: The caller is responsible to check if `_to` is capable of receiving NFTs otherwise, they may be lost\n     * @dev throws unless _from is msg.sender, an authorized operator or an approved addressed for the NFT\n     * @param _from address of current owner of the NFT\n     * @param _to address of the new owner of the NFT\n     * @param _tokenId NFT to be transfered\n     */\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /**\n     * @notice change or reaffirm the approved address for an NFT\n     * @dev zero address is invalid\n     * @param _approved the new approved address for the NFT controller\n     * @param _tokenId NFT to approve\n     */\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /**\n     * @notice enable or disable approval for a third-party `_operator` to manage `msg.sender`'s assets\n     * @dev emits the ApprovalForAll event. The contract must allow multiple operators per owner\n     * @param _operator address to add to set of authorized operators\n     * @param _approved true if operator is approved, false to revoke approval\n     */\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /**\n     * @notice get approved address for a single NFT\n     * @dev throws if _tokenId isn't a valid NFT\n     * @param _tokenId the NFT to find the approved address for\n     * @return approved address\n     */\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /**\n     * @notice check if an address is an authorized operator for another address\n     * @param _owner the address that owns the NFT\n     * @param _operator the address that acts on behalf of the `_owner`\n     * @return returns `true` if `_operator` is an approved operator for `_owner`, else otherwise\n     */\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}",
  "sourcePath": "/Users/josh/Bytangle/Practice/Web3.0 & dApps/contracts/josh-nft/josh-nft-contract/contracts/IERC721.sol",
  "ast": {
    "absolutePath": "project:/contracts/IERC721.sol",
    "exportedSymbols": {
      "IERC165": [
        87
      ],
      "IERC721": [
        203
      ]
    },
    "id": 204,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 89,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:23:3"
      },
      {
        "absolutePath": "project:/contracts/IERC165.sol",
        "file": "./IERC165.sol",
        "id": 90,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 204,
        "sourceUnit": 88,
        "src": "62:23:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 92,
              "name": "IERC165",
              "nameLocations": [
                "333:7:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 87,
              "src": "333:7:3"
            },
            "id": 93,
            "nodeType": "InheritanceSpecifier",
            "src": "333:7:3"
          }
        ],
        "canonicalName": "IERC721",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 91,
          "nodeType": "StructuredDocumentation",
          "src": "87:224:3",
          "text": " @title ERC721 Non-Fungible token standard Interface\n @dev Details can be found here: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n Note: the ERC-165 identifier for this interface is 0x80ac58cd."
        },
        "fullyImplemented": false,
        "id": 203,
        "linearizedBaseContracts": [
          203,
          87
        ],
        "name": "IERC721",
        "nameLocation": "322:7:3",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 94,
              "nodeType": "StructuredDocumentation",
              "src": "347:295:3",
              "text": " @dev This emits when the ownership of the NFT changes\n Note: it should also emit on NFT creation and destruction\n @param _from address of the initial owner\n @param _to address of the entity to receive the ownership\n @param _tokenId unique ID of the NFT"
            },
            "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
            "id": 102,
            "name": "Transfer",
            "nameLocation": "653:8:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 101,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 96,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "678:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 102,
                  "src": "662:21:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 95,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "662:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 98,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "701:3:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 102,
                  "src": "685:19:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 97,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "685:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "722:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 102,
                  "src": "706:24:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 99,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "706:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "661:70:3"
            },
            "src": "647:85:3"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 103,
              "nodeType": "StructuredDocumentation",
              "src": "738:235:3",
              "text": " @dev this emits when the approved address for an NFT changes or reaffirmed\n @param _owner address of the owner of the NFT\n @param _approved the new owner's address\n @param _tokenId the ID of the NFT"
            },
            "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
            "id": 111,
            "name": "Approval",
            "nameLocation": "984:8:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 110,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 105,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "1009:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 111,
                  "src": "993:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 104,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "993:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 107,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_approved",
                  "nameLocation": "1033:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 111,
                  "src": "1017:25:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 106,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1017:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 109,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "1060:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 111,
                  "src": "1044:24:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 108,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1044:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "992:77:3"
            },
            "src": "978:92:3"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 112,
              "nodeType": "StructuredDocumentation",
              "src": "1076:256:3",
              "text": " @dev emits when an operator is enabled or disabled for an owner\n @param _owner address of the owner of the NFT\n @param _operator address of to be set as operator\n @param _approved boolean showing approval or disapproval"
            },
            "eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
            "id": 120,
            "name": "ApprovalForAll",
            "nameLocation": "1343:14:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 119,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 114,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "1374:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 120,
                  "src": "1358:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 113,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1358:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 116,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "1398:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 120,
                  "src": "1382:25:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 115,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1382:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 118,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "_approved",
                  "nameLocation": "1414:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 120,
                  "src": "1409:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 117,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1409:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1357:67:3"
            },
            "src": "1337:88:3"
          },
          {
            "documentation": {
              "id": 121,
              "nodeType": "StructuredDocumentation",
              "src": "1431:315:3",
              "text": " @notice counts the owner's NFTs\n @dev cannot count NFTs assigned to the zero address.\n Note function should possibly throw or revert for an attempt to count NFTs assigned to zero address\n @param _owner the address of the NFTs owner\n @return The total NFT owned by `_owner`"
            },
            "functionSelector": "70a08231",
            "id": 128,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "1760:9:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 124,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 123,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "1778:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 128,
                  "src": "1770:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 122,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1770:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1769:16:3"
            },
            "returnParameters": {
              "id": 127,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 126,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 128,
                  "src": "1809:7:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 125,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1809:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1808:9:3"
            },
            "scope": 203,
            "src": "1751:67:3",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 129,
              "nodeType": "StructuredDocumentation",
              "src": "1824:254:3",
              "text": " @notice get the owner of the NFT with token ID `_tokenId`\n @dev NFTs assigned to zero address are considered invalid\n @param _tokenId uint256 id of the NFT\n @return address of the owner of NFT with `_tokenId` token ID"
            },
            "functionSelector": "6352211e",
            "id": 136,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "ownerOf",
            "nameLocation": "2092:7:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 132,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 131,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "2108:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 136,
                  "src": "2100:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 130,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2100:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2099:18:3"
            },
            "returnParameters": {
              "id": 135,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 134,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 136,
                  "src": "2141:7:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 133,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2141:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2140:9:3"
            },
            "scope": 203,
            "src": "2083:67:3",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 137,
              "nodeType": "StructuredDocumentation",
              "src": "2156:502:3",
              "text": " @notice transfers the ownership of an NFT from one address to the other\n @dev throws unless the current owner `_to` is msg.sender, \nan authorized operator or an approved address for the NFT\n Note: check the EIP-721 documentation for more details [url provided above]\n @param _from the current owner of the NFT\n @param _to the new owner\n @param _tokenId NFT to transfer\n @param _data additional data if necessary with no specific format"
            },
            "functionSelector": "b88d4fde",
            "id": 148,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "safeTransferFrom",
            "nameLocation": "2672:16:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 146,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 139,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "2697:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 148,
                  "src": "2689:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 138,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2689:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 141,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "2712:3:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 148,
                  "src": "2704:11:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 140,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2704:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 143,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "2725:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 148,
                  "src": "2717:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 142,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2717:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 145,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "2748:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 148,
                  "src": "2735:18:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 144,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2735:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2688:66:3"
            },
            "returnParameters": {
              "id": 147,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2771:0:3"
            },
            "scope": 203,
            "src": "2663:109:3",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 149,
              "nodeType": "StructuredDocumentation",
              "src": "2778:286:3",
              "text": " @notice transfer NFT ownership between addresses\n @dev This work identically to the function declared above except that it lacks data argument\n @param _from address of the NFT owner\n @param _to new owner of NFT\n @param _tokenId NFT to transfer"
            },
            "functionSelector": "42842e0e",
            "id": 158,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "safeTransferFrom",
            "nameLocation": "3078:16:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 156,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 151,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "3103:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 158,
                  "src": "3095:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 150,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3095:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 153,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "3118:3:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 158,
                  "src": "3110:11:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 152,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3110:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 155,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3131:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 158,
                  "src": "3123:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 154,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3123:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3094:46:3"
            },
            "returnParameters": {
              "id": 157,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3157:0:3"
            },
            "scope": 203,
            "src": "3069:89:3",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 159,
              "nodeType": "StructuredDocumentation",
              "src": "3164:425:3",
              "text": " @notice transfers NFT ownership\n Note: The caller is responsible to check if `_to` is capable of receiving NFTs otherwise, they may be lost\n @dev throws unless _from is msg.sender, an authorized operator or an approved addressed for the NFT\n @param _from address of current owner of the NFT\n @param _to address of the new owner of the NFT\n @param _tokenId NFT to be transfered"
            },
            "functionSelector": "23b872dd",
            "id": 168,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nameLocation": "3603:12:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 166,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 161,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "3624:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 168,
                  "src": "3616:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 160,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3616:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 163,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "3639:3:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 168,
                  "src": "3631:11:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 162,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3631:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 165,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3652:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 168,
                  "src": "3644:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 164,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3644:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3615:46:3"
            },
            "returnParameters": {
              "id": 167,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3678:0:3"
            },
            "scope": 203,
            "src": "3594:85:3",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 169,
              "nodeType": "StructuredDocumentation",
              "src": "3685:223:3",
              "text": " @notice change or reaffirm the approved address for an NFT\n @dev zero address is invalid\n @param _approved the new approved address for the NFT controller\n @param _tokenId NFT to approve"
            },
            "functionSelector": "095ea7b3",
            "id": 176,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "3922:7:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 174,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 171,
                  "mutability": "mutable",
                  "name": "_approved",
                  "nameLocation": "3938:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 176,
                  "src": "3930:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 170,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3930:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 173,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "3957:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 176,
                  "src": "3949:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 172,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3949:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3929:37:3"
            },
            "returnParameters": {
              "id": 175,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3983:0:3"
            },
            "scope": 203,
            "src": "3913:71:3",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 177,
              "nodeType": "StructuredDocumentation",
              "src": "3990:361:3",
              "text": " @notice enable or disable approval for a third-party `_operator` to manage `msg.sender`'s assets\n @dev emits the ApprovalForAll event. The contract must allow multiple operators per owner\n @param _operator address to add to set of authorized operators\n @param _approved true if operator is approved, false to revoke approval"
            },
            "functionSelector": "a22cb465",
            "id": 184,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setApprovalForAll",
            "nameLocation": "4365:17:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 182,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 179,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "4391:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 184,
                  "src": "4383:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 178,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4383:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 181,
                  "mutability": "mutable",
                  "name": "_approved",
                  "nameLocation": "4407:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 184,
                  "src": "4402:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 180,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4402:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4382:35:3"
            },
            "returnParameters": {
              "id": 183,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4426:0:3"
            },
            "scope": 203,
            "src": "4356:71:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 185,
              "nodeType": "StructuredDocumentation",
              "src": "4433:209:3",
              "text": " @notice get approved address for a single NFT\n @dev throws if _tokenId isn't a valid NFT\n @param _tokenId the NFT to find the approved address for\n @return approved address"
            },
            "functionSelector": "081812fc",
            "id": 192,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getApproved",
            "nameLocation": "4656:11:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 188,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 187,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "4676:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 192,
                  "src": "4668:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 186,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4668:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4667:18:3"
            },
            "returnParameters": {
              "id": 191,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 190,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 192,
                  "src": "4709:7:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 189,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4709:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4708:9:3"
            },
            "scope": 203,
            "src": "4647:71:3",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 193,
              "nodeType": "StructuredDocumentation",
              "src": "4724:313:3",
              "text": " @notice check if an address is an authorized operator for another address\n @param _owner the address that owns the NFT\n @param _operator the address that acts on behalf of the `_owner`\n @return returns `true` if `_operator` is an approved operator for `_owner`, else otherwise"
            },
            "functionSelector": "e985e9c5",
            "id": 202,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isApprovedForAll",
            "nameLocation": "5051:16:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 198,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 195,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "5076:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 202,
                  "src": "5068:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 194,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5068:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 197,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "5092:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 202,
                  "src": "5084:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 196,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5084:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5067:35:3"
            },
            "returnParameters": {
              "id": 201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 200,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 202,
                  "src": "5126:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 199,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5126:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5125:6:3"
            },
            "scope": 203,
            "src": "5042:90:3",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 204,
        "src": "312:4822:3",
        "usedErrors": []
      }
    ],
    "src": "37:5097:3"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.16+commit.07a7930e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.9",
  "updatedAt": "2022-08-30T11:00:19.611Z",
  "devdoc": {
    "details": "Details can be found here: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md Note: the ERC-165 identifier for this interface is 0x80ac58cd.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "this emits when the approved address for an NFT changes or reaffirmed",
        "params": {
          "_approved": "the new owner's address",
          "_owner": "address of the owner of the NFT",
          "_tokenId": "the ID of the NFT"
        }
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "emits when an operator is enabled or disabled for an owner",
        "params": {
          "_approved": "boolean showing approval or disapproval",
          "_operator": "address of to be set as operator",
          "_owner": "address of the owner of the NFT"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "This emits when the ownership of the NFT changes Note: it should also emit on NFT creation and destruction",
        "params": {
          "_from": "address of the initial owner",
          "_to": "address of the entity to receive the ownership",
          "_tokenId": "unique ID of the NFT"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "zero address is invalid",
        "params": {
          "_approved": "the new approved address for the NFT controller",
          "_tokenId": "NFT to approve"
        }
      },
      "balanceOf(address)": {
        "details": "cannot count NFTs assigned to the zero address. Note function should possibly throw or revert for an attempt to count NFTs assigned to zero address",
        "params": {
          "_owner": "the address of the NFTs owner"
        },
        "returns": {
          "_0": "The total NFT owned by `_owner`"
        }
      },
      "getApproved(uint256)": {
        "details": "throws if _tokenId isn't a valid NFT",
        "params": {
          "_tokenId": "the NFT to find the approved address for"
        },
        "returns": {
          "_0": "approved address"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "the address that acts on behalf of the `_owner`",
          "_owner": "the address that owns the NFT"
        },
        "returns": {
          "_0": "returns `true` if `_operator` is an approved operator for `_owner`, else otherwise"
        }
      },
      "ownerOf(uint256)": {
        "details": "NFTs assigned to zero address are considered invalid",
        "params": {
          "_tokenId": "uint256 id of the NFT"
        },
        "returns": {
          "_0": "address of the owner of NFT with `_tokenId` token ID"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "This work identically to the function declared above except that it lacks data argument",
        "params": {
          "_from": "address of the NFT owner",
          "_to": "new owner of NFT",
          "_tokenId": "NFT to transfer"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "throws unless the current owner `_to` is msg.sender,  an authorized operator or an approved address for the NFT Note: check the EIP-721 documentation for more details [url provided above]",
        "params": {
          "_data": "additional data if necessary with no specific format",
          "_from": "the current owner of the NFT",
          "_to": "the new owner",
          "_tokenId": "NFT to transfer"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "emits the ApprovalForAll event. The contract must allow multiple operators per owner",
        "params": {
          "_approved": "true if operator is approved, false to revoke approval",
          "_operator": "address to add to set of authorized operators"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165. This function uses less than 30,000 gas.",
        "params": {
          "_interfaceID": "Interface identifier as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `_interfaceID` and `_interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "throws unless _from is msg.sender, an authorized operator or an approved addressed for the NFT",
        "params": {
          "_from": "address of current owner of the NFT",
          "_to": "address of the new owner of the NFT",
          "_tokenId": "NFT to be transfered"
        }
      }
    },
    "title": "ERC721 Non-Fungible token standard Interface",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "change or reaffirm the approved address for an NFT"
      },
      "balanceOf(address)": {
        "notice": "counts the owner's NFTs"
      },
      "getApproved(uint256)": {
        "notice": "get approved address for a single NFT"
      },
      "isApprovedForAll(address,address)": {
        "notice": "check if an address is an authorized operator for another address"
      },
      "ownerOf(uint256)": {
        "notice": "get the owner of the NFT with token ID `_tokenId`"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer NFT ownership between addresses"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfers the ownership of an NFT from one address to the other"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "enable or disable approval for a third-party `_operator` to manage `msg.sender`'s assets"
      },
      "supportsInterface(bytes4)": {
        "notice": "queries if a contract supports an interface"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfers NFT ownership Note: The caller is responsible to check if `_to` is capable of receiving NFTs otherwise, they may be lost"
      }
    },
    "version": 1
  }
}